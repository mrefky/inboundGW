package main

import (
	"flag"
	"fmt"
	"path"
	_ "strings"
	"syscall"
	"time"

	//	"time"

	"github.com/quickfixgo/field"
	"github.com/quickfixgo/quickfix"
	"github.com/quickfixgo/tag"

	//	"reflect"

	fix44er "github.com/quickfixgo/fix44/reject"
	//fix44nos "github.com/quickfixgo/fix44/newordersingle"

	///"github.com/quickfixgo/fix44/ordercancelreplacerequest"
	//OCRR "github.com/quickfixgo/fix44/ordercancelreplacerequest"
	//OCR "github.com/quickfixgo/fix44/ordercancelrequest"

	_ "encoding/json"
	"log"
	"os"
	"os/signal"

	//"strconv"

	"github.com/Shopify/sarama"
	//cluster "github.com/bsm/sarama-cluster"
	//"timestamppb"
	// "time"
)
var last time.Time  = time.Now()
var current time.Time  = time.Now()
var b time.Duration=1 * time.Millisecond
var producer = createProducer()
type executor struct {
	//orderID int
//	execID  int
	*quickfix.MessageRouter
}

func Reject(msg *quickfix.Message, sis quickfix.SessionID){
seq,_:=msg.Header.GetInt(tag.MsgSeqNum)
Ric:= fix44er.New(field.NewRefSeqNum(seq))
fmt.Println("Rejected")
//quickfix.reex :=fix44er.new()
//ex1:=fix44er.FromMessage(Ric)
Ric.SetText("Message Rate Exceeded")
quickfix.SendToTarget(Ric,sis)
}




func newExecutor() *executor {
	e := &executor{MessageRouter: quickfix.NewMessageRouter()}

	//e.AddRoute(fix44nos.Route(e.OnFIX44NewOrderSingle))
	//e.AddRoute(OCR.Route(e.OnOrderCancelRequest))
	//e.AddRoute(OCRR.Route(e.OnOrderCancelReplaceRequest))

	return e
}




// quickfix.Application interface
func (e executor) OnCreate(sessionID quickfix.SessionID)                           {
	
//last:=time.Now()
}
func (e executor) OnLogon(sessionID quickfix.SessionID)                            {}
func (e executor) OnLogout(sessionID quickfix.SessionID)                           {}
func (e executor) ToAdmin(msg *quickfix.Message, sessionID quickfix.SessionID)     {}
func (e executor) ToApp(msg *quickfix.Message, sessionID quickfix.SessionID) error { return nil }
func (e executor) FromAdmin(msg *quickfix.Message, sessionID quickfix.SessionID) quickfix.MessageRejectError {
	return nil
}

// Use Message Cracker on Incoming Application Messages
//var string last
func (e *executor) FromApp(msg *quickfix.Message, sessionID quickfix.SessionID) (reject quickfix.MessageRejectError) {
	//return e.Route(msg, sessionID)
	//\\producer := createProducer()
	//fmt.Println(msg.ToMessage().String())
	
//m4:=strings.Replace(msg.String(),"\x01","|",1000)
current=time.Now()
d:=current.Sub(last)
fmt.Println("--------------------")
fmt.Println(current,last)
fmt.Println(d,b)
fmt.Println("--------------------")

if d<=b {
	fmt.Println("Too Fast")
	Reject(msg,sessionID)
	return
}else{
	fmt.Println("OK")
	last=time.Now()
}
fmt.Println("--------------------")
fmt.Println("")
last=time.Now()

m4:=msg.String()
tag:=quickfix.Tag(tag.Symbol)
sym,_:=msg.Body.GetString(tag)
//fmt.Println(m4)
//	fmt.Println(strings.Split( msg.String(),"\x01"))

	//cid,err:=msg.GetClOrdID()
	producer.Input() <- &sarama.ProducerMessage{
		Topic: "inbound",
		Value: sarama.ByteEncoder(m4),
		Key:   sarama.ByteEncoder(sym),
	}
	return 



}
/*
func (e *executor) OnOrderCancelReplaceRequest(msg OCRR.OrderCancelReplaceRequest, sessionID quickfix.SessionID) (err quickfix.MessageRejectError) {
	if err != nil {
		return err
	}
	fmt.Println("Request to Amend order recived")
	fmt.Println(msg.ToMessage().String())
	producer := createProducer()
	
	//cid,err:=msg.GetClOrdID()
	producer.Input() <- &sarama.ProducerMessage{
		Topic: "Inbound",
		Value: sarama.ByteEncoder(msg.ToMessage().String()),
		Key:   sarama.ByteEncoder("IN"),
	}


	return
	//e.Route(msg.Message, sessionID)
}

func (e *executor) OnOrderCancelRequest(msg OCR.OrderCancelRequest, sessionID quickfix.SessionID) (err quickfix.MessageRejectError) {
	if err != nil {
		return err
	}
	fmt.Println("Request to cancel order recived")
	fmt.Println(msg.ToMessage().String())
	
	
	//cid,err:=msg.GetClOrdID()
	producer := createProducer()
	
	//cid,err:=msg.GetClOrdID()
	producer.Input() <- &sarama.ProducerMessage{
		Topic: "Inbound",
		Value: sarama.ByteEncoder(msg.ToMessage().String()),
		Key:   sarama.ByteEncoder("IN"),
	}


	
	
	return
	
}




func (e *executor) OnFIX44NewOrderSingle(msg fix44nos.NewOrderSingle, sessionID quickfix.SessionID) (err quickfix.MessageRejectError) {
	
	

	producer := createProducer()
	
	
	producer.Input() <- &sarama.ProducerMessage{
		Topic: "Inbound",
		Value: sarama.ByteEncoder(msg.ToMessage().String()),
		Key:   sarama.ByteEncoder("IN"),
	}

	
	return
}

*/
func main() {

	flag.Parse()

	cfgFileName := path.Join("config", "executor.cfg")
	if flag.NArg() > 0 {
		cfgFileName = flag.Arg(0)
	}

	cfg, err := os.Open(cfgFileName)
	if err != nil {
		fmt.Printf("Error opening %v, %v\n", cfgFileName, err)
		return
	}

	appSettings, err := quickfix.ParseSettings(cfg)
	if err != nil {
		fmt.Println("Error reading cfg,", err)
		return
	}

	logFactory, _ := quickfix.NewFileLogFactory(appSettings)
	app := newExecutor()

	acceptor, err := quickfix.NewAcceptor(app, quickfix.NewMemoryStoreFactory(), appSettings, logFactory)
	if err != nil {
		fmt.Printf("Unable to create Acceptor: %s\n", err)
		return
	}

	err = acceptor.Start()
	if err != nil {
		fmt.Printf("Unable to start Acceptor: %s\n", err)
		return
	}

	interrupt := make(chan os.Signal, 1)
	signal.Notify(interrupt, os.Interrupt, syscall.SIGTERM)
	<-interrupt

	acceptor.Stop()
}
func createProducer() sarama.AsyncProducer {
	config := sarama.NewConfig()
	config.Producer.Return.Successes = false         // fire and forget
	config.Producer.Return.Errors = true             // notify on failed
	config.Producer.RequiredAcks = sarama.WaitForAll // waits for all insync replicas to commit

//	producer, err := sarama.NewAsyncProducer([]string{"kafka.default.svc.cluster.local:9092"}, config)
	producer, err := sarama.NewAsyncProducer([]string{"kafka.default.svc.cluster.local:9092"}, config)
	if err != nil {
		log.Fatal("Unable to connect producer to kafka server")
	}

	return producer

}
